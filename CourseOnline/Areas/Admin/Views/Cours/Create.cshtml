
@model CourseOnline.Models.Cours

@{
    ViewBag.Title = "Create";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<div class="page-wrapper">
    <div class="container-fluid">
        <div class="row">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <h4>Cours</h4>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.CategoryId, "CategoryId", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("CategoryId", null, "--Category--", htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.CourseName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.CourseName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CourseName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-2" })

                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Image, new { htmlAttributes = new { @class = "form-control", @id = "txtImage" }, id = "txtImage" })
                            <span class="input-group-addon" onclick="ChooseImg()">
                                <i class="fa fa-upload fa-lg"></i>
                            </span>
                        </div>
                        <img class="img img-thumbnail" id="Img" src="" style="height: 200px;width:200px" />
                        @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" }, id = "txtDescription" })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>                   

                    <div class="form-group">
                        @Html.LabelFor(model => model.Benefits, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.TextAreaFor(model => model.Benefits, new { htmlAttributes = new { @class = "form-control" }, id = "txtBenefits" })
                            @Html.ValidationMessageFor(model => model.Benefits, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Document, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Document, new { htmlAttributes = new { @class = "form-control", @id = "UrlDocument" }, id = "UrlDocument" })
                            <span class="input-group-addon" onclick="ChooseFile()">
                                <i class="fa fa-upload fa-lg"></i>
                            </span>
                            @Html.ValidationMessageFor(model => model.Document, "", new { @class = "text-danger" })
                        </div>
                    </div>



                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Create" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }

            <div>
                @Html.ActionLink("Back to List", "Index")
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>

        function ChooseImg() {
            const finder = new CKFinder();
            finder.selectActionFunction = function (fileUrl) {
                $("#Img").attr("src", fileUrl);
                $("#txtImage").val(fileUrl);
            }
            finder.popup();
        }
        var editor = CKEDITOR.replace('txtDescription', {
            customConfig: '/Content/js/plugins/ckeditor/ckeditor.js',
            htmlEncodeOutput: true
        })
        var editor = CKEDITOR.replace('txtBenefits', {
            customConfig: '/Content/js/plugins/ckeditor/ckeditor.js',
            htmlEncodeOutput: true
        })
        function ChooseFile() {
            const finder = new CKFinder();
            finder.selectActionFunction = function (fileUrl) {
                $("#UrlDocument").val(fileUrl);
            }
            finder.popup();
        }
        const content = CKEDITOR.instances['txtDescription'].getData();
    </script>
}}